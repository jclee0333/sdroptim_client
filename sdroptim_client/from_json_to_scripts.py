# -*- coding: utf-8 -*-
import json, os
global for_java_portal
for_java_portal = False
try:
    import sdroptim_client.RCodeGenerator as RGen
    import sdroptim_client.PythonCodeModulator as PyMod
except:
    import RCodeGenerator as RGen
    import PythonCodeModulator as PyMod
    for_java_portal = True
from multiprocessing import cpu_count

def FullscriptsGenerator(json_file_name, for_java_portal=False):
    # GUI parameters loading part
    '''for_java_portal is reserved for future plan (2021-07-29)'''
    json_file_path = "./"
    json_file_number = ""
    with open(json_file_name) as data_file:
        gui_params = json.load(data_file)
    #
    #prefix_generated_code = "json_file_name = "+"'"+json_file_path+json_file_number+json_file_name+"'\n"
    prefix_generated_code = "json_file_name = "+"'"+json_file_name+"'\n"
    #
    temp = gui_params.copy()
    #############################
    ## make python script (.py)
    #############################
    # 20210624 add autofe
    debug = False
    dejob_id = ""
    if 'autofe_system_attr' in gui_params:
        try:
            jobpath, (uname, sname, job_title, wsname, job_directory) = PyMod.get_jobpath_with_attr(gui_params, 'autofe', debug=debug)
        except:
            debug=True
            print("** Generating codes via debug mode for local testing. Please run this program on the portal system.")
            jobpath, (uname, sname, job_title, wsname, job_directory) = PyMod.get_jobpath_with_attr(gui_params, 'autofe', debug=debug)
        ####### get dejob_id if file exists
        try:
            with open(jobpath+os.sep+'job.id','r') as d_id:
                dejob_id=int(d_id.readlines()[0].split('\n')[0])
        except:
            dejob_id = ""
        #######
        jobscripts = PyMod.get_autofe_batch_script(gui_params=gui_params, max_nproc_per_node=int(cpu_count()/2), json_file_name=json_file_name, debug=debug, dejob_id = dejob_id)
        # python codes are generated in the get_autofe_batch_script()
        with open(jobpath+os.sep+'job.sh', 'w') as f:
            f.write(jobscripts)
            os.chmod(jobpath+os.sep+'job.sh', 0o777) # add permission 201012
            return True
        return False
    #####
    if type(gui_params['algorithm']) is list:
        try:
            jobpath, (uname, sname, job_title, wsname, job_directory) = PyMod.get_jobpath_with_attr(gui_params, 'hpo', debug=debug)
        except:
            debug=True
            print("** Generating codes via debug mode for local testing. Please run this program on the portal system.")
            jobpath, (uname, sname, job_title, wsname, job_directory) = PyMod.get_jobpath_with_attr(gui_params, 'hpo', debug=debug)
        ####### get dejob_id if file exists
        try:
            with open(jobpath+os.sep+'job.id','r') as d_id:
                dejob_id=int(d_id.readlines()[0].split('\n')[0])
        except:
            dejob_id = ""
        #######
        generated_code = PyMod.from_gui_to_code(gui_params)        
        with open(jobpath+os.sep+job_title+'_generated.py', 'w') as f:
            f.write(prefix_generated_code+generated_code)
            os.chmod(jobpath+os.sep+job_title+'_generated.py', 0o666) # add permission 201012
    #############################
        #############################
        ## make job script(sbatch)
        #############################
        jobscripts = PyMod.get_batch_script(gui_params, debug=debug, dejob_id=dejob_id)
        with open(jobpath+os.sep+'job.sh', 'w') as f:
            f.write(jobscripts)
            os.chmod(jobpath+os.sep+'job.sh', 0o777) # add permission 201012
            return True
        return False
        #############################
    else: # if not hpo
        if gui_params['kernel'] == 'R':
            generated_code = RGen.from_gui_to_code(gui_params)
        elif gui_params['kernel'] == 'Python':
            generated_code = PyMod.from_gui_to_code(gui_params)
            generated_code = prefix_generated_code + generated_code
        else:
            generated_code = '[ERR] Empty kernel!'
        with open('generated.py', 'w') as f:
            f.write(generated_code)
            os.chmod('generated.py', 0o666) # add permission 201012
            return True
        return False
####

def get_default_generatedpy():
	json_file_name = "metadata.json"
	res = FullscriptsGenerator(json_file_name)

if __name__ == "__main__":
    import argparse
    parser = argparse.ArgumentParser()
    parser.add_argument('--json_file_name', help="name of jsonfile generated by GUI interfaces", default="metadata.json")
    args=parser.parse_args()
    res=FullscriptsGenerator(args.json_file_name, for_java_portal)
